spring.application.name=backend

# Server Configuration
server.port=8080

# Database Configuration
spring.datasource.url=jdbc:h2:mem:expenses
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sachin
spring.datasource.password=pa$$word
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create

# Sets the URL path for the H2 console.
spring.h2.console.path=/h2-console

# Enables the H2 database console for web access.
spring.h2.console.enabled=true

#spring.mvc.view.prefix=/WEB-INF/views/
#spring.mvc.view.prefix=/templates/
#spring.mvc.view.suffix=.html

# Default user credentials
#spring.security.user.name=user
#spring.security.user.password=password
#spring.security.user.roles=USER
#
## Custom login and logout settings
#spring.security.form.login-page=/login
#spring.security.form.logout-url=/logout
#spring.security.form.logout-success-url=/home
#
## Session management
#spring.security.session.maximum-sessions=1
#spring.security.session.create-session=always
#
## CSRF protection
#spring.security.csrf.enabled=true

# Disable CSRF for H2 Console (not recommended for production)
#security.enable-csrf=false

# Allow frame options for H2 Console
#spring.security.headers.frame=false

#
## H2 console settings (if applicable)
#spring.h2.console.enabled=true
#spring.security.h2-console.enabled=true

# Spring Security Authentication
#spring.security.user.name=admin
#spring.security.user.password=adminpa$$
#spring.security.user.roles=USER

# Spring Security OAuth2 Configuration
#security.oauth2.client.client-id=my-client-id
#security.oauth2.client.client-secret=my-client-secret
#security.oauth2.client.access-token-uri=http://localhost:8080/oauth/token
#security.oauth2.client.user-authorization-uri=http://localhost:8080/oauth/authorize
#security.oauth2.resource.token-info-uri=http://localhost:8080/oauth/check_token

# CORS Configuration
# Customize allowed origins, methods, and headers as needed
#spring.mvc.cors.allowed-origins=*
#spring.mvc.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
#spring.mvc.cors.allowed-headers=*
#spring.web.cors.allowed-origins=*
#spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
#spring.web.cors.allowed-headers=*

# Spring Security OAuth2 Configuration
#spring.security.oauth2.client.registration.my-client.client-id=my-client-id
#spring.security.oauth2.client.registration.my-client.client-secret=my-client-secret
#spring.security.oauth2.client.provider.my-client.token-uri=http://localhost:8080/oauth/token

#spring.security.oauth2.client.registration.google.client-id=your-client-id
#spring.security.oauth2.client.registration.google.client-secret=your-client-secret
#spring.security.oauth2.client.registration.google.scope=openid,email,profile
#spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
#spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
#spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
#spring.security.oauth2.client.provider.google.user-info-uri=https://openidconnect.googleapis.com/v1/userinfo
#spring.security.oauth2.client.provider.google.user-name-attribute=name

